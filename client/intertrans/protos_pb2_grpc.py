# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import intertrans.protos_pb2 as protos__pb2


class TranslationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BatchTranslate = channel.unary_unary(
                '/TranslationService/BatchTranslate',
                request_serializer=protos__pb2.BatchTranslationRequest.SerializeToString,
                response_deserializer=protos__pb2.BatchTranslationResponse.FromString,
                )
        self.BatchTranslateCAK = channel.unary_unary(
                '/TranslationService/BatchTranslateCAK',
                request_serializer=protos__pb2.BatchTranslationRequest.SerializeToString,
                response_deserializer=protos__pb2.BatchTranslationResponse.FromString,
                )
        self.BatchPanEtAlTranslate = channel.unary_unary(
                '/TranslationService/BatchPanEtAlTranslate',
                request_serializer=protos__pb2.BatchTranslationRequest.SerializeToString,
                response_deserializer=protos__pb2.BatchTranslationResponse.FromString,
                )
        self.BatchRunVerification = channel.unary_unary(
                '/TranslationService/BatchRunVerification',
                request_serializer=protos__pb2.BatchVerificationRequest.SerializeToString,
                response_deserializer=protos__pb2.BatchVerificationResponse.FromString,
                )


class TranslationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BatchTranslate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchTranslateCAK(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPanEtAlTranslate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchRunVerification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BatchTranslate': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchTranslate,
                    request_deserializer=protos__pb2.BatchTranslationRequest.FromString,
                    response_serializer=protos__pb2.BatchTranslationResponse.SerializeToString,
            ),
            'BatchTranslateCAK': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchTranslateCAK,
                    request_deserializer=protos__pb2.BatchTranslationRequest.FromString,
                    response_serializer=protos__pb2.BatchTranslationResponse.SerializeToString,
            ),
            'BatchPanEtAlTranslate': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPanEtAlTranslate,
                    request_deserializer=protos__pb2.BatchTranslationRequest.FromString,
                    response_serializer=protos__pb2.BatchTranslationResponse.SerializeToString,
            ),
            'BatchRunVerification': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchRunVerification,
                    request_deserializer=protos__pb2.BatchVerificationRequest.FromString,
                    response_serializer=protos__pb2.BatchVerificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TranslationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TranslationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BatchTranslate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TranslationService/BatchTranslate',
            protos__pb2.BatchTranslationRequest.SerializeToString,
            protos__pb2.BatchTranslationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchTranslateCAK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TranslationService/BatchTranslateCAK',
            protos__pb2.BatchTranslationRequest.SerializeToString,
            protos__pb2.BatchTranslationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchPanEtAlTranslate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TranslationService/BatchPanEtAlTranslate',
            protos__pb2.BatchTranslationRequest.SerializeToString,
            protos__pb2.BatchTranslationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchRunVerification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TranslationService/BatchRunVerification',
            protos__pb2.BatchVerificationRequest.SerializeToString,
            protos__pb2.BatchVerificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class InfrastructureServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LaunchInferenceEndpoint = channel.unary_unary(
                '/InfrastructureService/LaunchInferenceEndpoint',
                request_serializer=protos__pb2.StartEndpointRequest.SerializeToString,
                response_deserializer=protos__pb2.LaunchResponse.FromString,
                )
        self.StopInferenceEndpoint = channel.unary_unary(
                '/InfrastructureService/StopInferenceEndpoint',
                request_serializer=protos__pb2.StopEndpointRequest.SerializeToString,
                response_deserializer=protos__pb2.LaunchResponse.FromString,
                )


class InfrastructureServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LaunchInferenceEndpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopInferenceEndpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InfrastructureServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LaunchInferenceEndpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchInferenceEndpoint,
                    request_deserializer=protos__pb2.StartEndpointRequest.FromString,
                    response_serializer=protos__pb2.LaunchResponse.SerializeToString,
            ),
            'StopInferenceEndpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.StopInferenceEndpoint,
                    request_deserializer=protos__pb2.StopEndpointRequest.FromString,
                    response_serializer=protos__pb2.LaunchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InfrastructureService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InfrastructureService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LaunchInferenceEndpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InfrastructureService/LaunchInferenceEndpoint',
            protos__pb2.StartEndpointRequest.SerializeToString,
            protos__pb2.LaunchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopInferenceEndpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InfrastructureService/StopInferenceEndpoint',
            protos__pb2.StopEndpointRequest.SerializeToString,
            protos__pb2.LaunchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
