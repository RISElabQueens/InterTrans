// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protos.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TranslationServiceClient is the client API for TranslationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslationServiceClient interface {
	BatchTranslate(ctx context.Context, in *BatchTranslationRequest, opts ...grpc.CallOption) (*BatchTranslationResponse, error)
	BatchTranslateCAK(ctx context.Context, in *BatchTranslationRequest, opts ...grpc.CallOption) (*BatchTranslationResponse, error)
	BatchPanEtAlTranslate(ctx context.Context, in *BatchTranslationRequest, opts ...grpc.CallOption) (*BatchTranslationResponse, error)
	BatchRunVerification(ctx context.Context, in *BatchVerificationRequest, opts ...grpc.CallOption) (*BatchVerificationResponse, error)
}

type translationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslationServiceClient(cc grpc.ClientConnInterface) TranslationServiceClient {
	return &translationServiceClient{cc}
}

func (c *translationServiceClient) BatchTranslate(ctx context.Context, in *BatchTranslationRequest, opts ...grpc.CallOption) (*BatchTranslationResponse, error) {
	out := new(BatchTranslationResponse)
	err := c.cc.Invoke(ctx, "/TranslationService/BatchTranslate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationServiceClient) BatchTranslateCAK(ctx context.Context, in *BatchTranslationRequest, opts ...grpc.CallOption) (*BatchTranslationResponse, error) {
	out := new(BatchTranslationResponse)
	err := c.cc.Invoke(ctx, "/TranslationService/BatchTranslateCAK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationServiceClient) BatchPanEtAlTranslate(ctx context.Context, in *BatchTranslationRequest, opts ...grpc.CallOption) (*BatchTranslationResponse, error) {
	out := new(BatchTranslationResponse)
	err := c.cc.Invoke(ctx, "/TranslationService/BatchPanEtAlTranslate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationServiceClient) BatchRunVerification(ctx context.Context, in *BatchVerificationRequest, opts ...grpc.CallOption) (*BatchVerificationResponse, error) {
	out := new(BatchVerificationResponse)
	err := c.cc.Invoke(ctx, "/TranslationService/BatchRunVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslationServiceServer is the server API for TranslationService service.
// All implementations must embed UnimplementedTranslationServiceServer
// for forward compatibility
type TranslationServiceServer interface {
	BatchTranslate(context.Context, *BatchTranslationRequest) (*BatchTranslationResponse, error)
	BatchTranslateCAK(context.Context, *BatchTranslationRequest) (*BatchTranslationResponse, error)
	BatchPanEtAlTranslate(context.Context, *BatchTranslationRequest) (*BatchTranslationResponse, error)
	BatchRunVerification(context.Context, *BatchVerificationRequest) (*BatchVerificationResponse, error)
	mustEmbedUnimplementedTranslationServiceServer()
}

// UnimplementedTranslationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslationServiceServer struct {
}

func (UnimplementedTranslationServiceServer) BatchTranslate(context.Context, *BatchTranslationRequest) (*BatchTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTranslate not implemented")
}
func (UnimplementedTranslationServiceServer) BatchTranslateCAK(context.Context, *BatchTranslationRequest) (*BatchTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTranslateCAK not implemented")
}
func (UnimplementedTranslationServiceServer) BatchPanEtAlTranslate(context.Context, *BatchTranslationRequest) (*BatchTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPanEtAlTranslate not implemented")
}
func (UnimplementedTranslationServiceServer) BatchRunVerification(context.Context, *BatchVerificationRequest) (*BatchVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRunVerification not implemented")
}
func (UnimplementedTranslationServiceServer) mustEmbedUnimplementedTranslationServiceServer() {}

// UnsafeTranslationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslationServiceServer will
// result in compilation errors.
type UnsafeTranslationServiceServer interface {
	mustEmbedUnimplementedTranslationServiceServer()
}

func RegisterTranslationServiceServer(s grpc.ServiceRegistrar, srv TranslationServiceServer) {
	s.RegisterService(&TranslationService_ServiceDesc, srv)
}

func _TranslationService_BatchTranslate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).BatchTranslate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TranslationService/BatchTranslate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).BatchTranslate(ctx, req.(*BatchTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslationService_BatchTranslateCAK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).BatchTranslateCAK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TranslationService/BatchTranslateCAK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).BatchTranslateCAK(ctx, req.(*BatchTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslationService_BatchPanEtAlTranslate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).BatchPanEtAlTranslate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TranslationService/BatchPanEtAlTranslate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).BatchPanEtAlTranslate(ctx, req.(*BatchTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslationService_BatchRunVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServiceServer).BatchRunVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TranslationService/BatchRunVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServiceServer).BatchRunVerification(ctx, req.(*BatchVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranslationService_ServiceDesc is the grpc.ServiceDesc for TranslationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TranslationService",
	HandlerType: (*TranslationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchTranslate",
			Handler:    _TranslationService_BatchTranslate_Handler,
		},
		{
			MethodName: "BatchTranslateCAK",
			Handler:    _TranslationService_BatchTranslateCAK_Handler,
		},
		{
			MethodName: "BatchPanEtAlTranslate",
			Handler:    _TranslationService_BatchPanEtAlTranslate_Handler,
		},
		{
			MethodName: "BatchRunVerification",
			Handler:    _TranslationService_BatchRunVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos.proto",
}

// InfrastructureServiceClient is the client API for InfrastructureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfrastructureServiceClient interface {
	LaunchInferenceEndpoint(ctx context.Context, in *StartEndpointRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
	StopInferenceEndpoint(ctx context.Context, in *StopEndpointRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
}

type infrastructureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfrastructureServiceClient(cc grpc.ClientConnInterface) InfrastructureServiceClient {
	return &infrastructureServiceClient{cc}
}

func (c *infrastructureServiceClient) LaunchInferenceEndpoint(ctx context.Context, in *StartEndpointRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, "/InfrastructureService/LaunchInferenceEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructureServiceClient) StopInferenceEndpoint(ctx context.Context, in *StopEndpointRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, "/InfrastructureService/StopInferenceEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfrastructureServiceServer is the server API for InfrastructureService service.
// All implementations must embed UnimplementedInfrastructureServiceServer
// for forward compatibility
type InfrastructureServiceServer interface {
	LaunchInferenceEndpoint(context.Context, *StartEndpointRequest) (*LaunchResponse, error)
	StopInferenceEndpoint(context.Context, *StopEndpointRequest) (*LaunchResponse, error)
	mustEmbedUnimplementedInfrastructureServiceServer()
}

// UnimplementedInfrastructureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfrastructureServiceServer struct {
}

func (UnimplementedInfrastructureServiceServer) LaunchInferenceEndpoint(context.Context, *StartEndpointRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchInferenceEndpoint not implemented")
}
func (UnimplementedInfrastructureServiceServer) StopInferenceEndpoint(context.Context, *StopEndpointRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInferenceEndpoint not implemented")
}
func (UnimplementedInfrastructureServiceServer) mustEmbedUnimplementedInfrastructureServiceServer() {}

// UnsafeInfrastructureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfrastructureServiceServer will
// result in compilation errors.
type UnsafeInfrastructureServiceServer interface {
	mustEmbedUnimplementedInfrastructureServiceServer()
}

func RegisterInfrastructureServiceServer(s grpc.ServiceRegistrar, srv InfrastructureServiceServer) {
	s.RegisterService(&InfrastructureService_ServiceDesc, srv)
}

func _InfrastructureService_LaunchInferenceEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServiceServer).LaunchInferenceEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfrastructureService/LaunchInferenceEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServiceServer).LaunchInferenceEndpoint(ctx, req.(*StartEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfrastructureService_StopInferenceEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServiceServer).StopInferenceEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfrastructureService/StopInferenceEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServiceServer).StopInferenceEndpoint(ctx, req.(*StopEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfrastructureService_ServiceDesc is the grpc.ServiceDesc for InfrastructureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfrastructureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InfrastructureService",
	HandlerType: (*InfrastructureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LaunchInferenceEndpoint",
			Handler:    _InfrastructureService_LaunchInferenceEndpoint_Handler,
		},
		{
			MethodName: "StopInferenceEndpoint",
			Handler:    _InfrastructureService_StopInferenceEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos.proto",
}
