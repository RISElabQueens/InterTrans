// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: protos.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseStatus int32

const (
	ResponseStatus_PENDING                   ResponseStatus = 0
	ResponseStatus_PROCESSING                ResponseStatus = 1
	ResponseStatus_FAILED                    ResponseStatus = 2
	ResponseStatus_DONE                      ResponseStatus = 3
	ResponseStatus_TRANSLATION_FOUND         ResponseStatus = 4
	ResponseStatus_SKIPPED_PARENT_FAILED     ResponseStatus = 5
	ResponseStatus_SKIPPED_TRANSLATION_FOUND ResponseStatus = 6
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "PENDING",
		1: "PROCESSING",
		2: "FAILED",
		3: "DONE",
		4: "TRANSLATION_FOUND",
		5: "SKIPPED_PARENT_FAILED",
		6: "SKIPPED_TRANSLATION_FOUND",
	}
	ResponseStatus_value = map[string]int32{
		"PENDING":                   0,
		"PROCESSING":                1,
		"FAILED":                    2,
		"DONE":                      3,
		"TRANSLATION_FOUND":         4,
		"SKIPPED_PARENT_FAILED":     5,
		"SKIPPED_TRANSLATION_FOUND": 6,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_proto_enumTypes[0].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_protos_proto_enumTypes[0]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{0}
}

type TestSuite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuzzySuite    []*FuzzyTestCase `protobuf:"bytes,1,rep,name=fuzzy_suite,json=fuzzySuite,proto3" json:"fuzzy_suite,omitempty"`
	UnitTestSuite []*UnitTestCase  `protobuf:"bytes,2,rep,name=unit_test_suite,json=unitTestSuite,proto3" json:"unit_test_suite,omitempty"`
}

func (x *TestSuite) Reset() {
	*x = TestSuite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuite) ProtoMessage() {}

func (x *TestSuite) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuite.ProtoReflect.Descriptor instead.
func (*TestSuite) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{0}
}

func (x *TestSuite) GetFuzzySuite() []*FuzzyTestCase {
	if x != nil {
		return x.FuzzySuite
	}
	return nil
}

func (x *TestSuite) GetUnitTestSuite() []*UnitTestCase {
	if x != nil {
		return x.UnitTestSuite
	}
	return nil
}

type FuzzyTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StdinInput     string `protobuf:"bytes,1,opt,name=stdin_input,json=stdinInput,proto3" json:"stdin_input,omitempty"`
	ExpectedOutput string `protobuf:"bytes,2,opt,name=expected_output,json=expectedOutput,proto3" json:"expected_output,omitempty"`
}

func (x *FuzzyTestCase) Reset() {
	*x = FuzzyTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzyTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzyTestCase) ProtoMessage() {}

func (x *FuzzyTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzyTestCase.ProtoReflect.Descriptor instead.
func (*FuzzyTestCase) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{1}
}

func (x *FuzzyTestCase) GetStdinInput() string {
	if x != nil {
		return x.StdinInput
	}
	return ""
}

func (x *FuzzyTestCase) GetExpectedOutput() string {
	if x != nil {
		return x.ExpectedOutput
	}
	return ""
}

type ResponseFuzzyTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StdinInput     string `protobuf:"bytes,1,opt,name=stdin_input,json=stdinInput,proto3" json:"stdin_input,omitempty"`
	ExpectedOutput string `protobuf:"bytes,2,opt,name=expected_output,json=expectedOutput,proto3" json:"expected_output,omitempty"`
	ActualOutput   string `protobuf:"bytes,3,opt,name=actual_output,json=actualOutput,proto3" json:"actual_output,omitempty"`
	Passed         bool   `protobuf:"varint,4,opt,name=passed,proto3" json:"passed,omitempty"`
	ExecutedCode   string `protobuf:"bytes,5,opt,name=executed_code,json=executedCode,proto3" json:"executed_code,omitempty"`
}

func (x *ResponseFuzzyTestCase) Reset() {
	*x = ResponseFuzzyTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFuzzyTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFuzzyTestCase) ProtoMessage() {}

func (x *ResponseFuzzyTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFuzzyTestCase.ProtoReflect.Descriptor instead.
func (*ResponseFuzzyTestCase) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseFuzzyTestCase) GetStdinInput() string {
	if x != nil {
		return x.StdinInput
	}
	return ""
}

func (x *ResponseFuzzyTestCase) GetExpectedOutput() string {
	if x != nil {
		return x.ExpectedOutput
	}
	return ""
}

func (x *ResponseFuzzyTestCase) GetActualOutput() string {
	if x != nil {
		return x.ActualOutput
	}
	return ""
}

func (x *ResponseFuzzyTestCase) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *ResponseFuzzyTestCase) GetExecutedCode() string {
	if x != nil {
		return x.ExecutedCode
	}
	return ""
}

type ResponseUnitTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCode   string `protobuf:"bytes,1,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	ActualOutput string `protobuf:"bytes,2,opt,name=actual_output,json=actualOutput,proto3" json:"actual_output,omitempty"`
	Passed       bool   `protobuf:"varint,3,opt,name=passed,proto3" json:"passed,omitempty"`
	ExecutedCode string `protobuf:"bytes,4,opt,name=executed_code,json=executedCode,proto3" json:"executed_code,omitempty"`
}

func (x *ResponseUnitTestCase) Reset() {
	*x = ResponseUnitTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUnitTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUnitTestCase) ProtoMessage() {}

func (x *ResponseUnitTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUnitTestCase.ProtoReflect.Descriptor instead.
func (*ResponseUnitTestCase) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseUnitTestCase) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *ResponseUnitTestCase) GetActualOutput() string {
	if x != nil {
		return x.ActualOutput
	}
	return ""
}

func (x *ResponseUnitTestCase) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *ResponseUnitTestCase) GetExecutedCode() string {
	if x != nil {
		return x.ExecutedCode
	}
	return ""
}

type UnitTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	TestCase string `protobuf:"bytes,2,opt,name=test_case,json=testCase,proto3" json:"test_case,omitempty"`
	Imports  string `protobuf:"bytes,3,opt,name=imports,proto3" json:"imports,omitempty"`
}

func (x *UnitTestCase) Reset() {
	*x = UnitTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitTestCase) ProtoMessage() {}

func (x *UnitTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitTestCase.ProtoReflect.Descriptor instead.
func (*UnitTestCase) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{4}
}

func (x *UnitTestCase) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UnitTestCase) GetTestCase() string {
	if x != nil {
		return x.TestCase
	}
	return ""
}

func (x *UnitTestCase) GetImports() string {
	if x != nil {
		return x.Imports
	}
	return ""
}

type TargetSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language  string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *TargetSignature) Reset() {
	*x = TargetSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSignature) ProtoMessage() {}

func (x *TargetSignature) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSignature.ProtoReflect.Descriptor instead.
func (*TargetSignature) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{5}
}

func (x *TargetSignature) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TargetSignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type TranslationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeedLanguage       string             `protobuf:"bytes,2,opt,name=seed_language,json=seedLanguage,proto3" json:"seed_language,omitempty"`
	TargetLanguage     string             `protobuf:"bytes,3,opt,name=target_language,json=targetLanguage,proto3" json:"target_language,omitempty"`
	SeedCode           string             `protobuf:"bytes,4,opt,name=seed_code,json=seedCode,proto3" json:"seed_code,omitempty"`
	TestSuite          *TestSuite         `protobuf:"bytes,5,opt,name=test_suite,json=testSuite,proto3" json:"test_suite,omitempty"`
	UsedLanguages      []string           `protobuf:"bytes,6,rep,name=used_languages,json=usedLanguages,proto3" json:"used_languages,omitempty"`
	PromptTemplateName string             `protobuf:"bytes,7,opt,name=prompt_template_name,json=promptTemplateName,proto3" json:"prompt_template_name,omitempty"`
	TargetSignatures   []*TargetSignature `protobuf:"bytes,8,rep,name=target_signatures,json=targetSignatures,proto3" json:"target_signatures,omitempty"`
	RegexTemplateName  string             `protobuf:"bytes,9,opt,name=regex_template_name,json=regexTemplateName,proto3" json:"regex_template_name,omitempty"`
	ModelName          string             `protobuf:"bytes,10,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ExtraPromptData    string             `protobuf:"bytes,11,opt,name=extra_prompt_data,json=extraPromptData,proto3" json:"extra_prompt_data,omitempty"`
}

func (x *TranslationRequest) Reset() {
	*x = TranslationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationRequest) ProtoMessage() {}

func (x *TranslationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslationRequest.ProtoReflect.Descriptor instead.
func (*TranslationRequest) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{6}
}

func (x *TranslationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TranslationRequest) GetSeedLanguage() string {
	if x != nil {
		return x.SeedLanguage
	}
	return ""
}

func (x *TranslationRequest) GetTargetLanguage() string {
	if x != nil {
		return x.TargetLanguage
	}
	return ""
}

func (x *TranslationRequest) GetSeedCode() string {
	if x != nil {
		return x.SeedCode
	}
	return ""
}

func (x *TranslationRequest) GetTestSuite() *TestSuite {
	if x != nil {
		return x.TestSuite
	}
	return nil
}

func (x *TranslationRequest) GetUsedLanguages() []string {
	if x != nil {
		return x.UsedLanguages
	}
	return nil
}

func (x *TranslationRequest) GetPromptTemplateName() string {
	if x != nil {
		return x.PromptTemplateName
	}
	return ""
}

func (x *TranslationRequest) GetTargetSignatures() []*TargetSignature {
	if x != nil {
		return x.TargetSignatures
	}
	return nil
}

func (x *TranslationRequest) GetRegexTemplateName() string {
	if x != nil {
		return x.RegexTemplateName
	}
	return ""
}

func (x *TranslationRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *TranslationRequest) GetExtraPromptData() string {
	if x != nil {
		return x.ExtraPromptData
	}
	return ""
}

type ResponseTranslationEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptTemplate        string                   `protobuf:"bytes,1,opt,name=prompt_template,json=promptTemplate,proto3" json:"prompt_template,omitempty"`
	Prompt                string                   `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	TranslationId         string                   `protobuf:"bytes,3,opt,name=translation_id,json=translationId,proto3" json:"translation_id,omitempty"`
	InputLanguage         string                   `protobuf:"bytes,4,opt,name=input_language,json=inputLanguage,proto3" json:"input_language,omitempty"`
	TargetLanguage        string                   `protobuf:"bytes,5,opt,name=target_language,json=targetLanguage,proto3" json:"target_language,omitempty"`
	Level                 int32                    `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Success               bool                     `protobuf:"varint,7,opt,name=success,proto3" json:"success,omitempty"`
	InferenceOutput       string                   `protobuf:"bytes,8,opt,name=inference_output,json=inferenceOutput,proto3" json:"inference_output,omitempty"`
	ExecutionOutput       string                   `protobuf:"bytes,9,opt,name=execution_output,json=executionOutput,proto3" json:"execution_output,omitempty"`
	SourceCode            string                   `protobuf:"bytes,10,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	ExtractedSourceCode   string                   `protobuf:"bytes,11,opt,name=extracted_source_code,json=extractedSourceCode,proto3" json:"extracted_source_code,omitempty"`
	ParentEdgeId          int32                    `protobuf:"varint,12,opt,name=parent_edge_id,json=parentEdgeId,proto3" json:"parent_edge_id,omitempty"`
	Status                string                   `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	FuzzyTests            []*ResponseFuzzyTestCase `protobuf:"bytes,14,rep,name=fuzzy_tests,json=fuzzyTests,proto3" json:"fuzzy_tests,omitempty"`
	UnitTests             []*ResponseUnitTestCase  `protobuf:"bytes,15,rep,name=unit_tests,json=unitTests,proto3" json:"unit_tests,omitempty"`
	EdgeId                int32                    `protobuf:"varint,16,opt,name=edge_id,json=edgeId,proto3" json:"edge_id,omitempty"`
	WallTimeInference     int64                    `protobuf:"varint,17,opt,name=wallTimeInference,proto3" json:"wallTimeInference,omitempty"`
	WallTimeTestExecution int64                    `protobuf:"varint,18,opt,name=wallTimeTestExecution,proto3" json:"wallTimeTestExecution,omitempty"`
	UsedMemoization       bool                     `protobuf:"varint,19,opt,name=usedMemoization,proto3" json:"usedMemoization,omitempty"`
	UsedInferenceCache    bool                     `protobuf:"varint,20,opt,name=usedInferenceCache,proto3" json:"usedInferenceCache,omitempty"`
}

func (x *ResponseTranslationEdge) Reset() {
	*x = ResponseTranslationEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTranslationEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTranslationEdge) ProtoMessage() {}

func (x *ResponseTranslationEdge) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTranslationEdge.ProtoReflect.Descriptor instead.
func (*ResponseTranslationEdge) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseTranslationEdge) GetPromptTemplate() string {
	if x != nil {
		return x.PromptTemplate
	}
	return ""
}

func (x *ResponseTranslationEdge) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ResponseTranslationEdge) GetTranslationId() string {
	if x != nil {
		return x.TranslationId
	}
	return ""
}

func (x *ResponseTranslationEdge) GetInputLanguage() string {
	if x != nil {
		return x.InputLanguage
	}
	return ""
}

func (x *ResponseTranslationEdge) GetTargetLanguage() string {
	if x != nil {
		return x.TargetLanguage
	}
	return ""
}

func (x *ResponseTranslationEdge) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ResponseTranslationEdge) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseTranslationEdge) GetInferenceOutput() string {
	if x != nil {
		return x.InferenceOutput
	}
	return ""
}

func (x *ResponseTranslationEdge) GetExecutionOutput() string {
	if x != nil {
		return x.ExecutionOutput
	}
	return ""
}

func (x *ResponseTranslationEdge) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *ResponseTranslationEdge) GetExtractedSourceCode() string {
	if x != nil {
		return x.ExtractedSourceCode
	}
	return ""
}

func (x *ResponseTranslationEdge) GetParentEdgeId() int32 {
	if x != nil {
		return x.ParentEdgeId
	}
	return 0
}

func (x *ResponseTranslationEdge) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResponseTranslationEdge) GetFuzzyTests() []*ResponseFuzzyTestCase {
	if x != nil {
		return x.FuzzyTests
	}
	return nil
}

func (x *ResponseTranslationEdge) GetUnitTests() []*ResponseUnitTestCase {
	if x != nil {
		return x.UnitTests
	}
	return nil
}

func (x *ResponseTranslationEdge) GetEdgeId() int32 {
	if x != nil {
		return x.EdgeId
	}
	return 0
}

func (x *ResponseTranslationEdge) GetWallTimeInference() int64 {
	if x != nil {
		return x.WallTimeInference
	}
	return 0
}

func (x *ResponseTranslationEdge) GetWallTimeTestExecution() int64 {
	if x != nil {
		return x.WallTimeTestExecution
	}
	return 0
}

func (x *ResponseTranslationEdge) GetUsedMemoization() bool {
	if x != nil {
		return x.UsedMemoization
	}
	return false
}

func (x *ResponseTranslationEdge) GetUsedInferenceCache() bool {
	if x != nil {
		return x.UsedInferenceCache
	}
	return false
}

type ResponseTranslationPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationEdges  []*ResponseTranslationEdge `protobuf:"bytes,1,rep,name=translation_edges,json=translationEdges,proto3" json:"translation_edges,omitempty"`
	EdgeIndexMemoized []bool                     `protobuf:"varint,2,rep,packed,name=edge_index_memoized,json=edgeIndexMemoized,proto3" json:"edge_index_memoized,omitempty"`
}

func (x *ResponseTranslationPath) Reset() {
	*x = ResponseTranslationPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTranslationPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTranslationPath) ProtoMessage() {}

func (x *ResponseTranslationPath) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTranslationPath.ProtoReflect.Descriptor instead.
func (*ResponseTranslationPath) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseTranslationPath) GetTranslationEdges() []*ResponseTranslationEdge {
	if x != nil {
		return x.TranslationEdges
	}
	return nil
}

func (x *ResponseTranslationPath) GetEdgeIndexMemoized() []bool {
	if x != nil {
		return x.EdgeIndexMemoized
	}
	return nil
}

type TranslationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationRequest *TranslationRequest        `protobuf:"bytes,1,opt,name=translation_request,json=translationRequest,proto3" json:"translation_request,omitempty"`
	Paths              []*ResponseTranslationPath `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *TranslationResponse) Reset() {
	*x = TranslationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationResponse) ProtoMessage() {}

func (x *TranslationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslationResponse.ProtoReflect.Descriptor instead.
func (*TranslationResponse) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{9}
}

func (x *TranslationResponse) GetTranslationRequest() *TranslationRequest {
	if x != nil {
		return x.TranslationRequest
	}
	return nil
}

func (x *TranslationResponse) GetPaths() []*ResponseTranslationPath {
	if x != nil {
		return x.Paths
	}
	return nil
}

type BatchTranslationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationRequests []*TranslationRequest `protobuf:"bytes,1,rep,name=translation_requests,json=translationRequests,proto3" json:"translation_requests,omitempty"`
	Id                  string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	FileBaseName        string                `protobuf:"bytes,3,opt,name=file_base_name,json=fileBaseName,proto3" json:"file_base_name,omitempty"`
	FileSavePath        string                `protobuf:"bytes,4,opt,name=file_save_path,json=fileSavePath,proto3" json:"file_save_path,omitempty"`
}

func (x *BatchTranslationRequest) Reset() {
	*x = BatchTranslationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTranslationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTranslationRequest) ProtoMessage() {}

func (x *BatchTranslationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTranslationRequest.ProtoReflect.Descriptor instead.
func (*BatchTranslationRequest) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{10}
}

func (x *BatchTranslationRequest) GetTranslationRequests() []*TranslationRequest {
	if x != nil {
		return x.TranslationRequests
	}
	return nil
}

func (x *BatchTranslationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchTranslationRequest) GetFileBaseName() string {
	if x != nil {
		return x.FileBaseName
	}
	return ""
}

func (x *BatchTranslationRequest) GetFileSavePath() string {
	if x != nil {
		return x.FileSavePath
	}
	return ""
}

type BatchTranslationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranslationResponses []*TranslationResponse `protobuf:"bytes,1,rep,name=translation_responses,json=translationResponses,proto3" json:"translation_responses,omitempty"`
	RequestId            string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ReturnedToDisk       bool                   `protobuf:"varint,3,opt,name=returnedToDisk,proto3" json:"returnedToDisk,omitempty"`
}

func (x *BatchTranslationResponse) Reset() {
	*x = BatchTranslationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTranslationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTranslationResponse) ProtoMessage() {}

func (x *BatchTranslationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTranslationResponse.ProtoReflect.Descriptor instead.
func (*BatchTranslationResponse) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{11}
}

func (x *BatchTranslationResponse) GetTranslationResponses() []*TranslationResponse {
	if x != nil {
		return x.TranslationResponses
	}
	return nil
}

func (x *BatchTranslationResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *BatchTranslationResponse) GetReturnedToDisk() bool {
	if x != nil {
		return x.ReturnedToDisk
	}
	return false
}

type StartEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	GpuId     string `protobuf:"bytes,2,opt,name=gpu_id,json=gpuId,proto3" json:"gpu_id,omitempty"`
	Port      string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Seed      int64  `protobuf:"varint,4,opt,name=seed,proto3" json:"seed,omitempty"`
	ApiToken  string `protobuf:"bytes,5,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	LoraPath  string `protobuf:"bytes,6,opt,name=lora_path,json=loraPath,proto3" json:"lora_path,omitempty"`
}

func (x *StartEndpointRequest) Reset() {
	*x = StartEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEndpointRequest) ProtoMessage() {}

func (x *StartEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEndpointRequest.ProtoReflect.Descriptor instead.
func (*StartEndpointRequest) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{12}
}

func (x *StartEndpointRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *StartEndpointRequest) GetGpuId() string {
	if x != nil {
		return x.GpuId
	}
	return ""
}

func (x *StartEndpointRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *StartEndpointRequest) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *StartEndpointRequest) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *StartEndpointRequest) GetLoraPath() string {
	if x != nil {
		return x.LoraPath
	}
	return ""
}

type StopEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId int64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
}

func (x *StopEndpointRequest) Reset() {
	*x = StopEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEndpointRequest) ProtoMessage() {}

func (x *StopEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEndpointRequest.ProtoReflect.Descriptor instead.
func (*StopEndpointRequest) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{13}
}

func (x *StopEndpointRequest) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

type LaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId int64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
}

func (x *LaunchResponse) Reset() {
	*x = LaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchResponse) ProtoMessage() {}

func (x *LaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchResponse.ProtoReflect.Descriptor instead.
func (*LaunchResponse) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{14}
}

func (x *LaunchResponse) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

type VerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestSuite       *TestSuite `protobuf:"bytes,2,opt,name=test_suite,json=testSuite,proto3" json:"test_suite,omitempty"`
	InferenceOutput string     `protobuf:"bytes,3,opt,name=inferenceOutput,proto3" json:"inferenceOutput,omitempty"`
	TargetLanguage  string     `protobuf:"bytes,4,opt,name=targetLanguage,proto3" json:"targetLanguage,omitempty"`
	SourceLanguage  string     `protobuf:"bytes,5,opt,name=sourceLanguage,proto3" json:"sourceLanguage,omitempty"`
}

func (x *VerificationRequest) Reset() {
	*x = VerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationRequest) ProtoMessage() {}

func (x *VerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationRequest.ProtoReflect.Descriptor instead.
func (*VerificationRequest) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{15}
}

func (x *VerificationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerificationRequest) GetTestSuite() *TestSuite {
	if x != nil {
		return x.TestSuite
	}
	return nil
}

func (x *VerificationRequest) GetInferenceOutput() string {
	if x != nil {
		return x.InferenceOutput
	}
	return ""
}

func (x *VerificationRequest) GetTargetLanguage() string {
	if x != nil {
		return x.TargetLanguage
	}
	return ""
}

func (x *VerificationRequest) GetSourceLanguage() string {
	if x != nil {
		return x.SourceLanguage
	}
	return ""
}

type VerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationRequest *VerificationRequest     `protobuf:"bytes,1,opt,name=verification_request,json=verificationRequest,proto3" json:"verification_request,omitempty"`
	FuzzyTests          []*ResponseFuzzyTestCase `protobuf:"bytes,2,rep,name=fuzzy_tests,json=fuzzyTests,proto3" json:"fuzzy_tests,omitempty"`
	UnitTests           []*ResponseUnitTestCase  `protobuf:"bytes,3,rep,name=unit_tests,json=unitTests,proto3" json:"unit_tests,omitempty"`
	Status              string                   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *VerificationResponse) Reset() {
	*x = VerificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationResponse) ProtoMessage() {}

func (x *VerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationResponse.ProtoReflect.Descriptor instead.
func (*VerificationResponse) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{16}
}

func (x *VerificationResponse) GetVerificationRequest() *VerificationRequest {
	if x != nil {
		return x.VerificationRequest
	}
	return nil
}

func (x *VerificationResponse) GetFuzzyTests() []*ResponseFuzzyTestCase {
	if x != nil {
		return x.FuzzyTests
	}
	return nil
}

func (x *VerificationResponse) GetUnitTests() []*ResponseUnitTestCase {
	if x != nil {
		return x.UnitTests
	}
	return nil
}

func (x *VerificationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type BatchVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationRequests []*VerificationRequest `protobuf:"bytes,1,rep,name=verification_requests,json=verificationRequests,proto3" json:"verification_requests,omitempty"`
	Id                   string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BatchVerificationRequest) Reset() {
	*x = BatchVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchVerificationRequest) ProtoMessage() {}

func (x *BatchVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchVerificationRequest.ProtoReflect.Descriptor instead.
func (*BatchVerificationRequest) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{17}
}

func (x *BatchVerificationRequest) GetVerificationRequests() []*VerificationRequest {
	if x != nil {
		return x.VerificationRequests
	}
	return nil
}

func (x *BatchVerificationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BatchVerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationRequests  *VerificationRequest    `protobuf:"bytes,1,opt,name=verification_requests,json=verificationRequests,proto3" json:"verification_requests,omitempty"`
	VerificationResponses []*VerificationResponse `protobuf:"bytes,2,rep,name=verification_responses,json=verificationResponses,proto3" json:"verification_responses,omitempty"`
}

func (x *BatchVerificationResponse) Reset() {
	*x = BatchVerificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchVerificationResponse) ProtoMessage() {}

func (x *BatchVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchVerificationResponse.ProtoReflect.Descriptor instead.
func (*BatchVerificationResponse) Descriptor() ([]byte, []int) {
	return file_protos_proto_rawDescGZIP(), []int{18}
}

func (x *BatchVerificationResponse) GetVerificationRequests() *VerificationRequest {
	if x != nil {
		return x.VerificationRequests
	}
	return nil
}

func (x *BatchVerificationResponse) GetVerificationResponses() []*VerificationResponse {
	if x != nil {
		return x.VerificationResponses
	}
	return nil
}

var File_protos_proto protoreflect.FileDescriptor

var file_protos_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73,
	0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x66,
	0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x22, 0x59, 0x0a, 0x0d, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc3,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x79,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x64, 0x69, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x61, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xcd, 0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x65, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xb0, 0x06, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x75, 0x7a,
	0x7a, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x0a, 0x66, 0x75, 0x7a, 0x7a,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65,
	0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x45, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x64, 0x67, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x11, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65,
	0x6d, 0x6f, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x44,
	0x69, 0x73, 0x6b, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x67,
	0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x70, 0x75,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70,
	0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x72, 0x61, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x72, 0x61,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a,
	0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x15, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4c, 0x0a,
	0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2a, 0x94, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4b, 0x49, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x06, 0x32, 0xc2, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x41, 0x4b, 0x12, 0x18, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x6e, 0x45, 0x74, 0x41, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x75, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9a, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x17, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_proto_rawDescOnce sync.Once
	file_protos_proto_rawDescData = file_protos_proto_rawDesc
)

func file_protos_proto_rawDescGZIP() []byte {
	file_protos_proto_rawDescOnce.Do(func() {
		file_protos_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_proto_rawDescData)
	})
	return file_protos_proto_rawDescData
}

var file_protos_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_protos_proto_goTypes = []interface{}{
	(ResponseStatus)(0),               // 0: ResponseStatus
	(*TestSuite)(nil),                 // 1: TestSuite
	(*FuzzyTestCase)(nil),             // 2: FuzzyTestCase
	(*ResponseFuzzyTestCase)(nil),     // 3: ResponseFuzzyTestCase
	(*ResponseUnitTestCase)(nil),      // 4: ResponseUnitTestCase
	(*UnitTestCase)(nil),              // 5: UnitTestCase
	(*TargetSignature)(nil),           // 6: TargetSignature
	(*TranslationRequest)(nil),        // 7: TranslationRequest
	(*ResponseTranslationEdge)(nil),   // 8: ResponseTranslationEdge
	(*ResponseTranslationPath)(nil),   // 9: ResponseTranslationPath
	(*TranslationResponse)(nil),       // 10: TranslationResponse
	(*BatchTranslationRequest)(nil),   // 11: BatchTranslationRequest
	(*BatchTranslationResponse)(nil),  // 12: BatchTranslationResponse
	(*StartEndpointRequest)(nil),      // 13: StartEndpointRequest
	(*StopEndpointRequest)(nil),       // 14: StopEndpointRequest
	(*LaunchResponse)(nil),            // 15: LaunchResponse
	(*VerificationRequest)(nil),       // 16: VerificationRequest
	(*VerificationResponse)(nil),      // 17: VerificationResponse
	(*BatchVerificationRequest)(nil),  // 18: BatchVerificationRequest
	(*BatchVerificationResponse)(nil), // 19: BatchVerificationResponse
}
var file_protos_proto_depIdxs = []int32{
	2,  // 0: TestSuite.fuzzy_suite:type_name -> FuzzyTestCase
	5,  // 1: TestSuite.unit_test_suite:type_name -> UnitTestCase
	1,  // 2: TranslationRequest.test_suite:type_name -> TestSuite
	6,  // 3: TranslationRequest.target_signatures:type_name -> TargetSignature
	3,  // 4: ResponseTranslationEdge.fuzzy_tests:type_name -> ResponseFuzzyTestCase
	4,  // 5: ResponseTranslationEdge.unit_tests:type_name -> ResponseUnitTestCase
	8,  // 6: ResponseTranslationPath.translation_edges:type_name -> ResponseTranslationEdge
	7,  // 7: TranslationResponse.translation_request:type_name -> TranslationRequest
	9,  // 8: TranslationResponse.paths:type_name -> ResponseTranslationPath
	7,  // 9: BatchTranslationRequest.translation_requests:type_name -> TranslationRequest
	10, // 10: BatchTranslationResponse.translation_responses:type_name -> TranslationResponse
	1,  // 11: VerificationRequest.test_suite:type_name -> TestSuite
	16, // 12: VerificationResponse.verification_request:type_name -> VerificationRequest
	3,  // 13: VerificationResponse.fuzzy_tests:type_name -> ResponseFuzzyTestCase
	4,  // 14: VerificationResponse.unit_tests:type_name -> ResponseUnitTestCase
	16, // 15: BatchVerificationRequest.verification_requests:type_name -> VerificationRequest
	16, // 16: BatchVerificationResponse.verification_requests:type_name -> VerificationRequest
	17, // 17: BatchVerificationResponse.verification_responses:type_name -> VerificationResponse
	11, // 18: TranslationService.BatchTranslate:input_type -> BatchTranslationRequest
	11, // 19: TranslationService.BatchTranslateCAK:input_type -> BatchTranslationRequest
	11, // 20: TranslationService.BatchPanEtAlTranslate:input_type -> BatchTranslationRequest
	18, // 21: TranslationService.BatchRunVerification:input_type -> BatchVerificationRequest
	13, // 22: InfrastructureService.LaunchInferenceEndpoint:input_type -> StartEndpointRequest
	14, // 23: InfrastructureService.StopInferenceEndpoint:input_type -> StopEndpointRequest
	12, // 24: TranslationService.BatchTranslate:output_type -> BatchTranslationResponse
	12, // 25: TranslationService.BatchTranslateCAK:output_type -> BatchTranslationResponse
	12, // 26: TranslationService.BatchPanEtAlTranslate:output_type -> BatchTranslationResponse
	19, // 27: TranslationService.BatchRunVerification:output_type -> BatchVerificationResponse
	15, // 28: InfrastructureService.LaunchInferenceEndpoint:output_type -> LaunchResponse
	15, // 29: InfrastructureService.StopInferenceEndpoint:output_type -> LaunchResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_protos_proto_init() }
func file_protos_proto_init() {
	if File_protos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSuite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzyTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFuzzyTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUnitTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTranslationEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTranslationPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTranslationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTranslationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchVerificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_protos_proto_goTypes,
		DependencyIndexes: file_protos_proto_depIdxs,
		EnumInfos:         file_protos_proto_enumTypes,
		MessageInfos:      file_protos_proto_msgTypes,
	}.Build()
	File_protos_proto = out.File
	file_protos_proto_rawDesc = nil
	file_protos_proto_goTypes = nil
	file_protos_proto_depIdxs = nil
}
